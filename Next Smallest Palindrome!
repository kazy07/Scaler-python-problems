Next Smallest Palindrome!

Problem Description

Given a numeric string A representing a large number you need to find the next smallest palindrome greater than this number.



Problem Constraints

1 <= |A| <= 100

A doesn't start with zeroes and always contain digits from 0-9.



Input Format

First and only argument is an string A.



Output Format

Return a numeric string denoting the next smallest palindrome greater than A.



Example Input

Input 1:

 A = "23545"
Input 2:

 A = "999"


Example Output

Output 1:

 "23632"
Output 2:

 "1001"
 
 
 =================================================================================================
 Solution most optimized 
 =================================================================================================
 def nxtpal(A):
    n=len(A)
    ans=''
    half= A[:n//2]
    if(len(A)%2==0):
        ans= half+half[::-1]        
    else:
        nummid= A[n//2]
        ans= half+ nummid + half[::-1]
    if ans>A:
        return (ans)
    else:
        i = 10**(n//2) 
        A = str(((int(A)//i)+1)*i)
        return nxtpal(A)
        
  ==================================================================================================
  Solution for Scaler IDE
  ==================================================================================================
  
  class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
        n=len(A)
        ans=''
        half= A[:n//2]
        if(len(A)%2==0):
            ans= half+half[::-1]
        else:
            nummid= A[n//2]
            ans= half+ nummid + half[::-1]
        if ans>A:
            return(ans)
        else:
            i=10**(n//2)
            A = str(((int(A)//i)+1)*i)
            n=len(A)
            ans=''
            half= A[:n//2]
            if(len(A)%2==0):
                ans= half+half[::-1]
            else:
                nummid= A[n//2]
                ans= half+ nummid + half[::-1]
        return(ans)
        
