Beggars outside temple

There are N (N > 0) beggars sitting in a row outside a temple. Each beggar initially has an empty pot. When the devotees come to the temple, they donate some amount of coins to these beggars. Each devotee gives a fixed amount of coin(according to his faith and ability) to some K beggars sitting next to each other.

Given the amount donated by each devotee to the beggars ranging from i to j index, where 1 <= i <= j <= N, find out the final amount of money in each beggar's pot at the end of the day, provided they don't fill their pots by any other means.

Example:

Input:
N = 5, D = [[1, 2, 10], [2, 3, 20], [2, 5, 25]]

Return: [10, 55, 45, 25, 25]

Explanation:
=> First devotee donated 10 coins to beggars ranging from 1 to 2. Final amount in each beggars pot after first devotee: [10, 10, 0, 0, 0]

=> Second devotee donated 20 coins to beggars ranging from 2 to 3. Final amount in each beggars pot after second devotee: [10, 30, 20, 0, 0]

=> Third devotee donated 25 coins to beggars ranging from 2 to 5. Final amount in each beggars pot after third devotee: [10, 55, 45, 25, 25]

=============================================================================================================
Not optimized solution Python 3.5
=============================================================================================================

A= input()
B= [[1, 2, 10], [2, 3, 20], [2, 5, 25]]
A= int(A)
F= list(range(A))
for i in F:
    F[i] = 0
for x in range (len(B)):
    L = B[x]
    print (L)
    for y in range(int(L[0])-1,int(L[1])):
        F[y]= F[y]+L[2]
print (F)


===============================================================================================================
2nd solution optimized by use of prefix sum
===============================================================================================================

class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return a list of integers
    def solve(self, A, B):
        A= int(A)
        F= list(range(A))
        for i in F:
            F[i] = 0
        for x in range (len(B)):
            L = B[x]
            F[L[0]-1] += L[2]
            if (L[1]+1)<=A:
                F[L[1]]-=L[2]
        for i in range(1,len(F)):
            F[i]+=F[i-1]    
        return F
        
   
